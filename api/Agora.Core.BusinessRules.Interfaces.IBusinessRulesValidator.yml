### YamlMime:ManagedReference
items:
- uid: Agora.Core.BusinessRules.Interfaces.IBusinessRulesValidator
  commentId: T:Agora.Core.BusinessRules.Interfaces.IBusinessRulesValidator
  id: IBusinessRulesValidator
  parent: Agora.Core.BusinessRules.Interfaces
  children:
  - Agora.Core.BusinessRules.Interfaces.IBusinessRulesValidator.ValidateNewPostAsync(Agora.Core.Models.Post,Agora.Core.Common.UserContext)
  - Agora.Core.BusinessRules.Interfaces.IBusinessRulesValidator.ValidateNewPostCategoryAsync(Agora.Core.Models.PostCategory)
  - Agora.Core.BusinessRules.Interfaces.IBusinessRulesValidator.ValidatePostCategoryDeletionAsync(Agora.Core.Models.PostCategory)
  - Agora.Core.BusinessRules.Interfaces.IBusinessRulesValidator.ValidatePostCategoryUpdateAsync(Agora.Core.Models.PostCategory,System.String)
  - Agora.Core.BusinessRules.Interfaces.IBusinessRulesValidator.ValidatePostDeletionAsync(Agora.Core.Models.Post,Agora.Core.Common.UserContext)
  - Agora.Core.BusinessRules.Interfaces.IBusinessRulesValidator.ValidatePostStatusChangeAsync(Agora.Core.Models.Post,Agora.Core.Enums.PostStatus)
  - Agora.Core.BusinessRules.Interfaces.IBusinessRulesValidator.ValidatePostUpdateAsync(Agora.Core.Models.Post,System.String,Agora.Core.Common.UserContext)
  - Agora.Core.BusinessRules.Interfaces.IBusinessRulesValidator.ValidateTransaction(Agora.Core.Models.Transaction)
  - Agora.Core.BusinessRules.Interfaces.IBusinessRulesValidator.ValidateTransactionStatusChange(Agora.Core.Models.Transaction,Agora.Core.Enums.TransactionStatusEnum,Agora.Core.Enums.TransactionStatusEnum,Agora.Core.Common.UserContext)
  - Agora.Core.BusinessRules.Interfaces.IBusinessRulesValidator.ValidateTransactionStatusUpdateAsync(Agora.Core.Models.TransactionStatus,Agora.Core.Models.Requests.TransactionStatusDetailsUpdate)
  langs:
  - csharp
  - vb
  name: IBusinessRulesValidator
  nameWithType: IBusinessRulesValidator
  fullName: Agora.Core.BusinessRules.Interfaces.IBusinessRulesValidator
  type: Interface
  source:
    remote:
      path: Agora.Core/BusinessRules/Interfaces/IBusinessRulesValidator.cs
      branch: 15-Transition-status-logic
      repo: https://severineoppliger@dev.azure.com/severineoppliger/Agora/_git/Agora
    id: IBusinessRulesValidator
    path: Agora.Core/BusinessRules/Interfaces/IBusinessRulesValidator.cs
    startLine: 7
  assemblies:
  - Agora.Core
  namespace: Agora.Core.BusinessRules.Interfaces
  syntax:
    content: public interface IBusinessRulesValidator
    content.vb: Public Interface IBusinessRulesValidator
- uid: Agora.Core.BusinessRules.Interfaces.IBusinessRulesValidator.ValidateNewPostCategoryAsync(Agora.Core.Models.PostCategory)
  commentId: M:Agora.Core.BusinessRules.Interfaces.IBusinessRulesValidator.ValidateNewPostCategoryAsync(Agora.Core.Models.PostCategory)
  id: ValidateNewPostCategoryAsync(Agora.Core.Models.PostCategory)
  parent: Agora.Core.BusinessRules.Interfaces.IBusinessRulesValidator
  langs:
  - csharp
  - vb
  name: ValidateNewPostCategoryAsync(PostCategory)
  nameWithType: IBusinessRulesValidator.ValidateNewPostCategoryAsync(PostCategory)
  fullName: Agora.Core.BusinessRules.Interfaces.IBusinessRulesValidator.ValidateNewPostCategoryAsync(Agora.Core.Models.PostCategory)
  type: Method
  source:
    remote:
      path: Agora.Core/BusinessRules/Interfaces/IBusinessRulesValidator.cs
      branch: 15-Transition-status-logic
      repo: https://severineoppliger@dev.azure.com/severineoppliger/Agora/_git/Agora
    id: ValidateNewPostCategoryAsync
    path: Agora.Core/BusinessRules/Interfaces/IBusinessRulesValidator.cs
    startLine: 18
  assemblies:
  - Agora.Core
  namespace: Agora.Core.BusinessRules.Interfaces
  summary: >-
    Validates the creation of a new post category by checking business rules,

    such as ensuring the category name does not already exist.
  example: []
  syntax:
    content: Task<Result> ValidateNewPostCategoryAsync(PostCategory postCategory)
    parameters:
    - id: postCategory
      type: Agora.Core.Models.PostCategory
      description: The post category entity to validate.
    return:
      type: System.Threading.Tasks.Task{Agora.Core.Common.Result}
      description: >-
        A <xref href="Agora.Core.Common.Result" data-throw-if-not-resolved="false"></xref> indicating whether the post category passes validation.

        Returns a failure result if the name is already taken or violates other business rules.
    content.vb: Function ValidateNewPostCategoryAsync(postCategory As PostCategory) As Task(Of Result)
  overload: Agora.Core.BusinessRules.Interfaces.IBusinessRulesValidator.ValidateNewPostCategoryAsync*
- uid: Agora.Core.BusinessRules.Interfaces.IBusinessRulesValidator.ValidatePostCategoryUpdateAsync(Agora.Core.Models.PostCategory,System.String)
  commentId: M:Agora.Core.BusinessRules.Interfaces.IBusinessRulesValidator.ValidatePostCategoryUpdateAsync(Agora.Core.Models.PostCategory,System.String)
  id: ValidatePostCategoryUpdateAsync(Agora.Core.Models.PostCategory,System.String)
  parent: Agora.Core.BusinessRules.Interfaces.IBusinessRulesValidator
  langs:
  - csharp
  - vb
  name: ValidatePostCategoryUpdateAsync(PostCategory, string)
  nameWithType: IBusinessRulesValidator.ValidatePostCategoryUpdateAsync(PostCategory, string)
  fullName: Agora.Core.BusinessRules.Interfaces.IBusinessRulesValidator.ValidatePostCategoryUpdateAsync(Agora.Core.Models.PostCategory, string)
  type: Method
  source:
    remote:
      path: Agora.Core/BusinessRules/Interfaces/IBusinessRulesValidator.cs
      branch: 15-Transition-status-logic
      repo: https://severineoppliger@dev.azure.com/severineoppliger/Agora/_git/Agora
    id: ValidatePostCategoryUpdateAsync
    path: Agora.Core/BusinessRules/Interfaces/IBusinessRulesValidator.cs
    startLine: 30
  assemblies:
  - Agora.Core
  namespace: Agora.Core.BusinessRules.Interfaces
  summary: >-
    Validates the update of an existing post category by verifying business rules,

    such as ensuring the new name is different from the current one and does not already exist.
  example: []
  syntax:
    content: Task<Result> ValidatePostCategoryUpdateAsync(PostCategory postCategory, string newName)
    parameters:
    - id: postCategory
      type: Agora.Core.Models.PostCategory
      description: The existing post category entity.
    - id: newName
      type: System.String
      description: The new name proposed for the post category.
    return:
      type: System.Threading.Tasks.Task{Agora.Core.Common.Result}
      description: >-
        A <xref href="Agora.Core.Common.Result" data-throw-if-not-resolved="false"></xref> indicating whether the update is valid.

        Returns a failure result if the new name is identical to the current name or already exists.
    content.vb: Function ValidatePostCategoryUpdateAsync(postCategory As PostCategory, newName As String) As Task(Of Result)
  overload: Agora.Core.BusinessRules.Interfaces.IBusinessRulesValidator.ValidatePostCategoryUpdateAsync*
  nameWithType.vb: IBusinessRulesValidator.ValidatePostCategoryUpdateAsync(PostCategory, String)
  fullName.vb: Agora.Core.BusinessRules.Interfaces.IBusinessRulesValidator.ValidatePostCategoryUpdateAsync(Agora.Core.Models.PostCategory, String)
  name.vb: ValidatePostCategoryUpdateAsync(PostCategory, String)
- uid: Agora.Core.BusinessRules.Interfaces.IBusinessRulesValidator.ValidatePostCategoryDeletionAsync(Agora.Core.Models.PostCategory)
  commentId: M:Agora.Core.BusinessRules.Interfaces.IBusinessRulesValidator.ValidatePostCategoryDeletionAsync(Agora.Core.Models.PostCategory)
  id: ValidatePostCategoryDeletionAsync(Agora.Core.Models.PostCategory)
  parent: Agora.Core.BusinessRules.Interfaces.IBusinessRulesValidator
  langs:
  - csharp
  - vb
  name: ValidatePostCategoryDeletionAsync(PostCategory)
  nameWithType: IBusinessRulesValidator.ValidatePostCategoryDeletionAsync(PostCategory)
  fullName: Agora.Core.BusinessRules.Interfaces.IBusinessRulesValidator.ValidatePostCategoryDeletionAsync(Agora.Core.Models.PostCategory)
  type: Method
  source:
    remote:
      path: Agora.Core/BusinessRules/Interfaces/IBusinessRulesValidator.cs
      branch: 15-Transition-status-logic
      repo: https://severineoppliger@dev.azure.com/severineoppliger/Agora/_git/Agora
    id: ValidatePostCategoryDeletionAsync
    path: Agora.Core/BusinessRules/Interfaces/IBusinessRulesValidator.cs
    startLine: 40
  assemblies:
  - Agora.Core
  namespace: Agora.Core.BusinessRules.Interfaces
  summary: Validates the deletion of an existing post category by verifying it is not used by any post.
  example: []
  syntax:
    content: Task<Result> ValidatePostCategoryDeletionAsync(PostCategory postCategory)
    parameters:
    - id: postCategory
      type: Agora.Core.Models.PostCategory
      description: The post category to delete.
    return:
      type: System.Threading.Tasks.Task{Agora.Core.Common.Result}
      description: >-
        A <xref href="Agora.Core.Common.Result" data-throw-if-not-resolved="false"></xref> indicating whether the deletion is valid.

        Returns a failure result if the category is used by one or several posts.
    content.vb: Function ValidatePostCategoryDeletionAsync(postCategory As PostCategory) As Task(Of Result)
  overload: Agora.Core.BusinessRules.Interfaces.IBusinessRulesValidator.ValidatePostCategoryDeletionAsync*
- uid: Agora.Core.BusinessRules.Interfaces.IBusinessRulesValidator.ValidateNewPostAsync(Agora.Core.Models.Post,Agora.Core.Common.UserContext)
  commentId: M:Agora.Core.BusinessRules.Interfaces.IBusinessRulesValidator.ValidateNewPostAsync(Agora.Core.Models.Post,Agora.Core.Common.UserContext)
  id: ValidateNewPostAsync(Agora.Core.Models.Post,Agora.Core.Common.UserContext)
  parent: Agora.Core.BusinessRules.Interfaces.IBusinessRulesValidator
  langs:
  - csharp
  - vb
  name: ValidateNewPostAsync(Post, UserContext)
  nameWithType: IBusinessRulesValidator.ValidateNewPostAsync(Post, UserContext)
  fullName: Agora.Core.BusinessRules.Interfaces.IBusinessRulesValidator.ValidateNewPostAsync(Agora.Core.Models.Post, Agora.Core.Common.UserContext)
  type: Method
  source:
    remote:
      path: Agora.Core/BusinessRules/Interfaces/IBusinessRulesValidator.cs
      branch: 15-Transition-status-logic
      repo: https://severineoppliger@dev.azure.com/severineoppliger/Agora/_git/Agora
    id: ValidateNewPostAsync
    path: Agora.Core/BusinessRules/Interfaces/IBusinessRulesValidator.cs
    startLine: 54
  assemblies:
  - Agora.Core
  namespace: Agora.Core.BusinessRules.Interfaces
  summary: Validates whether a new post can be created by the current user based on business rules.
  remarks: >-
    The validation checks that the user does not already have another post (active or inactive)

    with the same title as the new post.
  example: []
  syntax:
    content: Task<Result> ValidateNewPostAsync(Post newPost, UserContext userContext)
    parameters:
    - id: newPost
      type: Agora.Core.Models.Post
      description: The new post to validate.
    - id: userContext
      type: Agora.Core.Common.UserContext
      description: The context of the user attempting to create the post.
    return:
      type: System.Threading.Tasks.Task{Agora.Core.Common.Result}
      description: A <xref href="Agora.Core.Common.Result" data-throw-if-not-resolved="false"></xref> indicating success if the post is valid, or failure if a rule is violated (e.g., duplicate title).
    content.vb: Function ValidateNewPostAsync(newPost As Post, userContext As UserContext) As Task(Of Result)
  overload: Agora.Core.BusinessRules.Interfaces.IBusinessRulesValidator.ValidateNewPostAsync*
- uid: Agora.Core.BusinessRules.Interfaces.IBusinessRulesValidator.ValidatePostUpdateAsync(Agora.Core.Models.Post,System.String,Agora.Core.Common.UserContext)
  commentId: M:Agora.Core.BusinessRules.Interfaces.IBusinessRulesValidator.ValidatePostUpdateAsync(Agora.Core.Models.Post,System.String,Agora.Core.Common.UserContext)
  id: ValidatePostUpdateAsync(Agora.Core.Models.Post,System.String,Agora.Core.Common.UserContext)
  parent: Agora.Core.BusinessRules.Interfaces.IBusinessRulesValidator
  langs:
  - csharp
  - vb
  name: ValidatePostUpdateAsync(Post, string?, UserContext)
  nameWithType: IBusinessRulesValidator.ValidatePostUpdateAsync(Post, string?, UserContext)
  fullName: Agora.Core.BusinessRules.Interfaces.IBusinessRulesValidator.ValidatePostUpdateAsync(Agora.Core.Models.Post, string?, Agora.Core.Common.UserContext)
  type: Method
  source:
    remote:
      path: Agora.Core/BusinessRules/Interfaces/IBusinessRulesValidator.cs
      branch: 15-Transition-status-logic
      repo: https://severineoppliger@dev.azure.com/severineoppliger/Agora/_git/Agora
    id: ValidatePostUpdateAsync
    path: Agora.Core/BusinessRules/Interfaces/IBusinessRulesValidator.cs
    startLine: 67
  assemblies:
  - Agora.Core
  namespace: Agora.Core.BusinessRules.Interfaces
  summary: >-
    Validates the update of an existing post by verifying business rules,

    such as ensuring the new title is not duplicate with a title of another post of the user.
  example: []
  syntax:
    content: Task<Result> ValidatePostUpdateAsync(Post oldPost, string? newTitle, UserContext userContext)
    parameters:
    - id: oldPost
      type: Agora.Core.Models.Post
      description: The existing post entity.
    - id: newTitle
      type: System.String
      description: The new title proposed for the post.
    - id: userContext
      type: Agora.Core.Common.UserContext
      description: The context of the user attempting to update the post.
    return:
      type: System.Threading.Tasks.Task{Agora.Core.Common.Result}
      description: >-
        A <xref href="Agora.Core.Common.Result" data-throw-if-not-resolved="false"></xref> indicating whether the update is valid.

        Returns a failure result if the new name is identical to the current name or already exists.
    content.vb: Function ValidatePostUpdateAsync(oldPost As Post, newTitle As String, userContext As UserContext) As Task(Of Result)
  overload: Agora.Core.BusinessRules.Interfaces.IBusinessRulesValidator.ValidatePostUpdateAsync*
  nameWithType.vb: IBusinessRulesValidator.ValidatePostUpdateAsync(Post, String, UserContext)
  fullName.vb: Agora.Core.BusinessRules.Interfaces.IBusinessRulesValidator.ValidatePostUpdateAsync(Agora.Core.Models.Post, String, Agora.Core.Common.UserContext)
  name.vb: ValidatePostUpdateAsync(Post, String, UserContext)
- uid: Agora.Core.BusinessRules.Interfaces.IBusinessRulesValidator.ValidatePostStatusChangeAsync(Agora.Core.Models.Post,Agora.Core.Enums.PostStatus)
  commentId: M:Agora.Core.BusinessRules.Interfaces.IBusinessRulesValidator.ValidatePostStatusChangeAsync(Agora.Core.Models.Post,Agora.Core.Enums.PostStatus)
  id: ValidatePostStatusChangeAsync(Agora.Core.Models.Post,Agora.Core.Enums.PostStatus)
  parent: Agora.Core.BusinessRules.Interfaces.IBusinessRulesValidator
  langs:
  - csharp
  - vb
  name: ValidatePostStatusChangeAsync(Post, PostStatus)
  nameWithType: IBusinessRulesValidator.ValidatePostStatusChangeAsync(Post, PostStatus)
  fullName: Agora.Core.BusinessRules.Interfaces.IBusinessRulesValidator.ValidatePostStatusChangeAsync(Agora.Core.Models.Post, Agora.Core.Enums.PostStatus)
  type: Method
  source:
    remote:
      path: Agora.Core/BusinessRules/Interfaces/IBusinessRulesValidator.cs
      branch: 15-Transition-status-logic
      repo: https://severineoppliger@dev.azure.com/severineoppliger/Agora/_git/Agora
    id: ValidatePostStatusChangeAsync
    path: Agora.Core/BusinessRules/Interfaces/IBusinessRulesValidator.cs
    startLine: 78
  assemblies:
  - Agora.Core
  namespace: Agora.Core.BusinessRules.Interfaces
  summary: >-
    Validates whether a post is allowed to transition from its current status to a new specified status,

    based on business rules and the current state of the post.
  example: []
  syntax:
    content: Result ValidatePostStatusChangeAsync(Post oldPost, PostStatus newStatus)
    parameters:
    - id: oldPost
      type: Agora.Core.Models.Post
      description: The existing post with its current status and related data.
    - id: newStatus
      type: Agora.Core.Enums.PostStatus
      description: The new status to which the post is intended to transition.
    return:
      type: Agora.Core.Common.Result
      description: A <xref href="Agora.Core.Common.Result" data-throw-if-not-resolved="false"></xref> indicating whether the status change is valid, including an error message if invalid.
    content.vb: Function ValidatePostStatusChangeAsync(oldPost As Post, newStatus As PostStatus) As Result
  overload: Agora.Core.BusinessRules.Interfaces.IBusinessRulesValidator.ValidatePostStatusChangeAsync*
- uid: Agora.Core.BusinessRules.Interfaces.IBusinessRulesValidator.ValidatePostDeletionAsync(Agora.Core.Models.Post,Agora.Core.Common.UserContext)
  commentId: M:Agora.Core.BusinessRules.Interfaces.IBusinessRulesValidator.ValidatePostDeletionAsync(Agora.Core.Models.Post,Agora.Core.Common.UserContext)
  id: ValidatePostDeletionAsync(Agora.Core.Models.Post,Agora.Core.Common.UserContext)
  parent: Agora.Core.BusinessRules.Interfaces.IBusinessRulesValidator
  langs:
  - csharp
  - vb
  name: ValidatePostDeletionAsync(Post, UserContext)
  nameWithType: IBusinessRulesValidator.ValidatePostDeletionAsync(Post, UserContext)
  fullName: Agora.Core.BusinessRules.Interfaces.IBusinessRulesValidator.ValidatePostDeletionAsync(Agora.Core.Models.Post, Agora.Core.Common.UserContext)
  type: Method
  source:
    remote:
      path: Agora.Core/BusinessRules/Interfaces/IBusinessRulesValidator.cs
      branch: 15-Transition-status-logic
      repo: https://severineoppliger@dev.azure.com/severineoppliger/Agora/_git/Agora
    id: ValidatePostDeletionAsync
    path: Agora.Core/BusinessRules/Interfaces/IBusinessRulesValidator.cs
    startLine: 90
  assemblies:
  - Agora.Core
  namespace: Agora.Core.BusinessRules.Interfaces
  summary: >-
    Validates whether a post can be deleted by a specific user, taking into account business rules

    such as ownership, status, and active transactions.
  example: []
  syntax:
    content: Task<Result> ValidatePostDeletionAsync(Post post, UserContext userContext)
    parameters:
    - id: post
      type: Agora.Core.Models.Post
      description: The post that is requested to be deleted.
    - id: userContext
      type: Agora.Core.Common.UserContext
      description: The context of the user attempting to delete the post.
    return:
      type: System.Threading.Tasks.Task{Agora.Core.Common.Result}
      description: >-
        A <xref href="System.Threading.Tasks.Task%601" data-throw-if-not-resolved="false"></xref> representing the asynchronous validation result. The result indicates

        whether deletion is permitted and includes an error message if it is not.
    content.vb: Function ValidatePostDeletionAsync(post As Post, userContext As UserContext) As Task(Of Result)
  overload: Agora.Core.BusinessRules.Interfaces.IBusinessRulesValidator.ValidatePostDeletionAsync*
- uid: Agora.Core.BusinessRules.Interfaces.IBusinessRulesValidator.ValidateTransactionStatusUpdateAsync(Agora.Core.Models.TransactionStatus,Agora.Core.Models.Requests.TransactionStatusDetailsUpdate)
  commentId: M:Agora.Core.BusinessRules.Interfaces.IBusinessRulesValidator.ValidateTransactionStatusUpdateAsync(Agora.Core.Models.TransactionStatus,Agora.Core.Models.Requests.TransactionStatusDetailsUpdate)
  id: ValidateTransactionStatusUpdateAsync(Agora.Core.Models.TransactionStatus,Agora.Core.Models.Requests.TransactionStatusDetailsUpdate)
  parent: Agora.Core.BusinessRules.Interfaces.IBusinessRulesValidator
  langs:
  - csharp
  - vb
  name: ValidateTransactionStatusUpdateAsync(TransactionStatus, TransactionStatusDetailsUpdate)
  nameWithType: IBusinessRulesValidator.ValidateTransactionStatusUpdateAsync(TransactionStatus, TransactionStatusDetailsUpdate)
  fullName: Agora.Core.BusinessRules.Interfaces.IBusinessRulesValidator.ValidateTransactionStatusUpdateAsync(Agora.Core.Models.TransactionStatus, Agora.Core.Models.Requests.TransactionStatusDetailsUpdate)
  type: Method
  source:
    remote:
      path: Agora.Core/BusinessRules/Interfaces/IBusinessRulesValidator.cs
      branch: 15-Transition-status-logic
      repo: https://severineoppliger@dev.azure.com/severineoppliger/Agora/_git/Agora
    id: ValidateTransactionStatusUpdateAsync
    path: Agora.Core/BusinessRules/Interfaces/IBusinessRulesValidator.cs
    startLine: 102
  assemblies:
  - Agora.Core
  namespace: Agora.Core.BusinessRules.Interfaces
  summary: >-
    Validates the update of an existing transaction status by verifying business rules,

    such as ensuring the new name is not duplicate with a name of another transaction status.
  example: []
  syntax:
    content: Task<Result> ValidateTransactionStatusUpdateAsync(TransactionStatus oldTransactionStatus, TransactionStatusDetailsUpdate newDetails)
    parameters:
    - id: oldTransactionStatus
      type: Agora.Core.Models.TransactionStatus
      description: The existing transaction status entity.
    - id: newDetails
      type: Agora.Core.Models.Requests.TransactionStatusDetailsUpdate
      description: The new data proposed for the transaction status.
    return:
      type: System.Threading.Tasks.Task{Agora.Core.Common.Result}
      description: >-
        A <xref href="Agora.Core.Common.Result" data-throw-if-not-resolved="false"></xref> indicating whether the update is valid.

        Returns a failure result if the new name is identical to the current name or already exists.
    content.vb: Function ValidateTransactionStatusUpdateAsync(oldTransactionStatus As TransactionStatus, newDetails As TransactionStatusDetailsUpdate) As Task(Of Result)
  overload: Agora.Core.BusinessRules.Interfaces.IBusinessRulesValidator.ValidateTransactionStatusUpdateAsync*
- uid: Agora.Core.BusinessRules.Interfaces.IBusinessRulesValidator.ValidateTransactionStatusChange(Agora.Core.Models.Transaction,Agora.Core.Enums.TransactionStatusEnum,Agora.Core.Enums.TransactionStatusEnum,Agora.Core.Common.UserContext)
  commentId: M:Agora.Core.BusinessRules.Interfaces.IBusinessRulesValidator.ValidateTransactionStatusChange(Agora.Core.Models.Transaction,Agora.Core.Enums.TransactionStatusEnum,Agora.Core.Enums.TransactionStatusEnum,Agora.Core.Common.UserContext)
  id: ValidateTransactionStatusChange(Agora.Core.Models.Transaction,Agora.Core.Enums.TransactionStatusEnum,Agora.Core.Enums.TransactionStatusEnum,Agora.Core.Common.UserContext)
  parent: Agora.Core.BusinessRules.Interfaces.IBusinessRulesValidator
  langs:
  - csharp
  - vb
  name: ValidateTransactionStatusChange(Transaction, TransactionStatusEnum, TransactionStatusEnum, UserContext)
  nameWithType: IBusinessRulesValidator.ValidateTransactionStatusChange(Transaction, TransactionStatusEnum, TransactionStatusEnum, UserContext)
  fullName: Agora.Core.BusinessRules.Interfaces.IBusinessRulesValidator.ValidateTransactionStatusChange(Agora.Core.Models.Transaction, Agora.Core.Enums.TransactionStatusEnum, Agora.Core.Enums.TransactionStatusEnum, Agora.Core.Common.UserContext)
  type: Method
  source:
    remote:
      path: Agora.Core/BusinessRules/Interfaces/IBusinessRulesValidator.cs
      branch: 15-Transition-status-logic
      repo: https://severineoppliger@dev.azure.com/severineoppliger/Agora/_git/Agora
    id: ValidateTransactionStatusChange
    path: Agora.Core/BusinessRules/Interfaces/IBusinessRulesValidator.cs
    startLine: 114
  assemblies:
  - Agora.Core
  namespace: Agora.Core.BusinessRules.Interfaces
  summary: >-
    Validates whether a user is authorized to change a transaction's status from the specified old status to the new status,

    based on business rules and the current user's context.
  example: []
  syntax:
    content: Result ValidateTransactionStatusChange(Transaction transaction, TransactionStatusEnum oldStatus, TransactionStatusEnum newStatus, UserContext userContext)
    parameters:
    - id: transaction
      type: Agora.Core.Models.Transaction
      description: The transaction being updated.
    - id: oldStatus
      type: Agora.Core.Enums.TransactionStatusEnum
      description: The current status of the transaction.
    - id: newStatus
      type: Agora.Core.Enums.TransactionStatusEnum
      description: The desired new status for the transaction.
    - id: userContext
      type: Agora.Core.Common.UserContext
      description: Information about the current user's identity and role.
    return:
      type: Agora.Core.Common.Result
      description: A failure result if the transition is not permitted; otherwise, a success result.
    content.vb: Function ValidateTransactionStatusChange(transaction As Transaction, oldStatus As TransactionStatusEnum, newStatus As TransactionStatusEnum, userContext As UserContext) As Result
  overload: Agora.Core.BusinessRules.Interfaces.IBusinessRulesValidator.ValidateTransactionStatusChange*
- uid: Agora.Core.BusinessRules.Interfaces.IBusinessRulesValidator.ValidateTransaction(Agora.Core.Models.Transaction)
  commentId: M:Agora.Core.BusinessRules.Interfaces.IBusinessRulesValidator.ValidateTransaction(Agora.Core.Models.Transaction)
  id: ValidateTransaction(Agora.Core.Models.Transaction)
  parent: Agora.Core.BusinessRules.Interfaces.IBusinessRulesValidator
  langs:
  - csharp
  - vb
  name: ValidateTransaction(Transaction)
  nameWithType: IBusinessRulesValidator.ValidateTransaction(Transaction)
  fullName: Agora.Core.BusinessRules.Interfaces.IBusinessRulesValidator.ValidateTransaction(Agora.Core.Models.Transaction)
  type: Method
  source:
    remote:
      path: Agora.Core/BusinessRules/Interfaces/IBusinessRulesValidator.cs
      branch: 15-Transition-status-logic
      repo: https://severineoppliger@dev.azure.com/severineoppliger/Agora/_git/Agora
    id: ValidateTransaction
    path: Agora.Core/BusinessRules/Interfaces/IBusinessRulesValidator.cs
    startLine: 125
  assemblies:
  - Agora.Core
  namespace: Agora.Core.BusinessRules.Interfaces
  summary: Validates the internal consistency and business rules of a transaction (e.g., buyer/seller identity, ownership, credit).
  example: []
  syntax:
    content: Result ValidateTransaction(Transaction transaction)
    parameters:
    - id: transaction
      type: Agora.Core.Models.Transaction
      description: The transaction to validate.
    return:
      type: Agora.Core.Common.Result
      description: A result indicating success if the transaction is valid; otherwise, a result containing the relevant validation errors.
    content.vb: Function ValidateTransaction(transaction As Transaction) As Result
  overload: Agora.Core.BusinessRules.Interfaces.IBusinessRulesValidator.ValidateTransaction*
references:
- uid: Agora.Core.BusinessRules.Interfaces
  commentId: N:Agora.Core.BusinessRules.Interfaces
  href: Agora.html
  name: Agora.Core.BusinessRules.Interfaces
  nameWithType: Agora.Core.BusinessRules.Interfaces
  fullName: Agora.Core.BusinessRules.Interfaces
  spec.csharp:
  - uid: Agora
    name: Agora
    href: Agora.html
  - name: .
  - uid: Agora.Core
    name: Core
    href: Agora.Core.html
  - name: .
  - uid: Agora.Core.BusinessRules
    name: BusinessRules
    href: Agora.Core.BusinessRules.html
  - name: .
  - uid: Agora.Core.BusinessRules.Interfaces
    name: Interfaces
    href: Agora.Core.BusinessRules.Interfaces.html
  spec.vb:
  - uid: Agora
    name: Agora
    href: Agora.html
  - name: .
  - uid: Agora.Core
    name: Core
    href: Agora.Core.html
  - name: .
  - uid: Agora.Core.BusinessRules
    name: BusinessRules
    href: Agora.Core.BusinessRules.html
  - name: .
  - uid: Agora.Core.BusinessRules.Interfaces
    name: Interfaces
    href: Agora.Core.BusinessRules.Interfaces.html
- uid: Agora.Core.Common.Result
  commentId: T:Agora.Core.Common.Result
  parent: Agora.Core.Common
  href: Agora.Core.Common.Result.html
  name: Result
  nameWithType: Result
  fullName: Agora.Core.Common.Result
- uid: Agora.Core.BusinessRules.Interfaces.IBusinessRulesValidator.ValidateNewPostCategoryAsync*
  commentId: Overload:Agora.Core.BusinessRules.Interfaces.IBusinessRulesValidator.ValidateNewPostCategoryAsync
  href: Agora.Core.BusinessRules.Interfaces.IBusinessRulesValidator.html#Agora_Core_BusinessRules_Interfaces_IBusinessRulesValidator_ValidateNewPostCategoryAsync_Agora_Core_Models_PostCategory_
  name: ValidateNewPostCategoryAsync
  nameWithType: IBusinessRulesValidator.ValidateNewPostCategoryAsync
  fullName: Agora.Core.BusinessRules.Interfaces.IBusinessRulesValidator.ValidateNewPostCategoryAsync
- uid: Agora.Core.Models.PostCategory
  commentId: T:Agora.Core.Models.PostCategory
  parent: Agora.Core.Models
  href: Agora.Core.Models.PostCategory.html
  name: PostCategory
  nameWithType: PostCategory
  fullName: Agora.Core.Models.PostCategory
- uid: System.Threading.Tasks.Task{Agora.Core.Common.Result}
  commentId: T:System.Threading.Tasks.Task{Agora.Core.Common.Result}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<Result>
  nameWithType: Task<Result>
  fullName: System.Threading.Tasks.Task<Agora.Core.Common.Result>
  nameWithType.vb: Task(Of Result)
  fullName.vb: System.Threading.Tasks.Task(Of Agora.Core.Common.Result)
  name.vb: Task(Of Result)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: Agora.Core.Common.Result
    name: Result
    href: Agora.Core.Common.Result.html
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: Agora.Core.Common.Result
    name: Result
    href: Agora.Core.Common.Result.html
  - name: )
- uid: Agora.Core.Common
  commentId: N:Agora.Core.Common
  href: Agora.html
  name: Agora.Core.Common
  nameWithType: Agora.Core.Common
  fullName: Agora.Core.Common
  spec.csharp:
  - uid: Agora
    name: Agora
    href: Agora.html
  - name: .
  - uid: Agora.Core
    name: Core
    href: Agora.Core.html
  - name: .
  - uid: Agora.Core.Common
    name: Common
    href: Agora.Core.Common.html
  spec.vb:
  - uid: Agora
    name: Agora
    href: Agora.html
  - name: .
  - uid: Agora.Core
    name: Core
    href: Agora.Core.html
  - name: .
  - uid: Agora.Core.Common
    name: Common
    href: Agora.Core.Common.html
- uid: Agora.Core.Models
  commentId: N:Agora.Core.Models
  href: Agora.html
  name: Agora.Core.Models
  nameWithType: Agora.Core.Models
  fullName: Agora.Core.Models
  spec.csharp:
  - uid: Agora
    name: Agora
    href: Agora.html
  - name: .
  - uid: Agora.Core
    name: Core
    href: Agora.Core.html
  - name: .
  - uid: Agora.Core.Models
    name: Models
    href: Agora.Core.Models.html
  spec.vb:
  - uid: Agora
    name: Agora
    href: Agora.html
  - name: .
  - uid: Agora.Core
    name: Core
    href: Agora.Core.html
  - name: .
  - uid: Agora.Core.Models
    name: Models
    href: Agora.Core.Models.html
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
- uid: Agora.Core.BusinessRules.Interfaces.IBusinessRulesValidator.ValidatePostCategoryUpdateAsync*
  commentId: Overload:Agora.Core.BusinessRules.Interfaces.IBusinessRulesValidator.ValidatePostCategoryUpdateAsync
  href: Agora.Core.BusinessRules.Interfaces.IBusinessRulesValidator.html#Agora_Core_BusinessRules_Interfaces_IBusinessRulesValidator_ValidatePostCategoryUpdateAsync_Agora_Core_Models_PostCategory_System_String_
  name: ValidatePostCategoryUpdateAsync
  nameWithType: IBusinessRulesValidator.ValidatePostCategoryUpdateAsync
  fullName: Agora.Core.BusinessRules.Interfaces.IBusinessRulesValidator.ValidatePostCategoryUpdateAsync
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: Agora.Core.BusinessRules.Interfaces.IBusinessRulesValidator.ValidatePostCategoryDeletionAsync*
  commentId: Overload:Agora.Core.BusinessRules.Interfaces.IBusinessRulesValidator.ValidatePostCategoryDeletionAsync
  href: Agora.Core.BusinessRules.Interfaces.IBusinessRulesValidator.html#Agora_Core_BusinessRules_Interfaces_IBusinessRulesValidator_ValidatePostCategoryDeletionAsync_Agora_Core_Models_PostCategory_
  name: ValidatePostCategoryDeletionAsync
  nameWithType: IBusinessRulesValidator.ValidatePostCategoryDeletionAsync
  fullName: Agora.Core.BusinessRules.Interfaces.IBusinessRulesValidator.ValidatePostCategoryDeletionAsync
- uid: Agora.Core.BusinessRules.Interfaces.IBusinessRulesValidator.ValidateNewPostAsync*
  commentId: Overload:Agora.Core.BusinessRules.Interfaces.IBusinessRulesValidator.ValidateNewPostAsync
  href: Agora.Core.BusinessRules.Interfaces.IBusinessRulesValidator.html#Agora_Core_BusinessRules_Interfaces_IBusinessRulesValidator_ValidateNewPostAsync_Agora_Core_Models_Post_Agora_Core_Common_UserContext_
  name: ValidateNewPostAsync
  nameWithType: IBusinessRulesValidator.ValidateNewPostAsync
  fullName: Agora.Core.BusinessRules.Interfaces.IBusinessRulesValidator.ValidateNewPostAsync
- uid: Agora.Core.Models.Post
  commentId: T:Agora.Core.Models.Post
  parent: Agora.Core.Models
  href: Agora.Core.Models.Post.html
  name: Post
  nameWithType: Post
  fullName: Agora.Core.Models.Post
- uid: Agora.Core.Common.UserContext
  commentId: T:Agora.Core.Common.UserContext
  parent: Agora.Core.Common
  href: Agora.Core.Common.UserContext.html
  name: UserContext
  nameWithType: UserContext
  fullName: Agora.Core.Common.UserContext
- uid: Agora.Core.BusinessRules.Interfaces.IBusinessRulesValidator.ValidatePostUpdateAsync*
  commentId: Overload:Agora.Core.BusinessRules.Interfaces.IBusinessRulesValidator.ValidatePostUpdateAsync
  href: Agora.Core.BusinessRules.Interfaces.IBusinessRulesValidator.html#Agora_Core_BusinessRules_Interfaces_IBusinessRulesValidator_ValidatePostUpdateAsync_Agora_Core_Models_Post_System_String_Agora_Core_Common_UserContext_
  name: ValidatePostUpdateAsync
  nameWithType: IBusinessRulesValidator.ValidatePostUpdateAsync
  fullName: Agora.Core.BusinessRules.Interfaces.IBusinessRulesValidator.ValidatePostUpdateAsync
- uid: Agora.Core.BusinessRules.Interfaces.IBusinessRulesValidator.ValidatePostStatusChangeAsync*
  commentId: Overload:Agora.Core.BusinessRules.Interfaces.IBusinessRulesValidator.ValidatePostStatusChangeAsync
  href: Agora.Core.BusinessRules.Interfaces.IBusinessRulesValidator.html#Agora_Core_BusinessRules_Interfaces_IBusinessRulesValidator_ValidatePostStatusChangeAsync_Agora_Core_Models_Post_Agora_Core_Enums_PostStatus_
  name: ValidatePostStatusChangeAsync
  nameWithType: IBusinessRulesValidator.ValidatePostStatusChangeAsync
  fullName: Agora.Core.BusinessRules.Interfaces.IBusinessRulesValidator.ValidatePostStatusChangeAsync
- uid: Agora.Core.Enums.PostStatus
  commentId: T:Agora.Core.Enums.PostStatus
  parent: Agora.Core.Enums
  href: Agora.Core.Enums.PostStatus.html
  name: PostStatus
  nameWithType: PostStatus
  fullName: Agora.Core.Enums.PostStatus
- uid: Agora.Core.Enums
  commentId: N:Agora.Core.Enums
  href: Agora.html
  name: Agora.Core.Enums
  nameWithType: Agora.Core.Enums
  fullName: Agora.Core.Enums
  spec.csharp:
  - uid: Agora
    name: Agora
    href: Agora.html
  - name: .
  - uid: Agora.Core
    name: Core
    href: Agora.Core.html
  - name: .
  - uid: Agora.Core.Enums
    name: Enums
    href: Agora.Core.Enums.html
  spec.vb:
  - uid: Agora
    name: Agora
    href: Agora.html
  - name: .
  - uid: Agora.Core
    name: Core
    href: Agora.Core.html
  - name: .
  - uid: Agora.Core.Enums
    name: Enums
    href: Agora.Core.Enums.html
- uid: Agora.Core.BusinessRules.Interfaces.IBusinessRulesValidator.ValidatePostDeletionAsync*
  commentId: Overload:Agora.Core.BusinessRules.Interfaces.IBusinessRulesValidator.ValidatePostDeletionAsync
  href: Agora.Core.BusinessRules.Interfaces.IBusinessRulesValidator.html#Agora_Core_BusinessRules_Interfaces_IBusinessRulesValidator_ValidatePostDeletionAsync_Agora_Core_Models_Post_Agora_Core_Common_UserContext_
  name: ValidatePostDeletionAsync
  nameWithType: IBusinessRulesValidator.ValidatePostDeletionAsync
  fullName: Agora.Core.BusinessRules.Interfaces.IBusinessRulesValidator.ValidatePostDeletionAsync
- uid: Agora.Core.BusinessRules.Interfaces.IBusinessRulesValidator.ValidateTransactionStatusUpdateAsync*
  commentId: Overload:Agora.Core.BusinessRules.Interfaces.IBusinessRulesValidator.ValidateTransactionStatusUpdateAsync
  href: Agora.Core.BusinessRules.Interfaces.IBusinessRulesValidator.html#Agora_Core_BusinessRules_Interfaces_IBusinessRulesValidator_ValidateTransactionStatusUpdateAsync_Agora_Core_Models_TransactionStatus_Agora_Core_Models_Requests_TransactionStatusDetailsUpdate_
  name: ValidateTransactionStatusUpdateAsync
  nameWithType: IBusinessRulesValidator.ValidateTransactionStatusUpdateAsync
  fullName: Agora.Core.BusinessRules.Interfaces.IBusinessRulesValidator.ValidateTransactionStatusUpdateAsync
- uid: Agora.Core.Models.TransactionStatus
  commentId: T:Agora.Core.Models.TransactionStatus
  parent: Agora.Core.Models
  href: Agora.Core.Models.TransactionStatus.html
  name: TransactionStatus
  nameWithType: TransactionStatus
  fullName: Agora.Core.Models.TransactionStatus
- uid: Agora.Core.Models.Requests.TransactionStatusDetailsUpdate
  commentId: T:Agora.Core.Models.Requests.TransactionStatusDetailsUpdate
  parent: Agora.Core.Models.Requests
  href: Agora.Core.Models.Requests.TransactionStatusDetailsUpdate.html
  name: TransactionStatusDetailsUpdate
  nameWithType: TransactionStatusDetailsUpdate
  fullName: Agora.Core.Models.Requests.TransactionStatusDetailsUpdate
- uid: Agora.Core.Models.Requests
  commentId: N:Agora.Core.Models.Requests
  href: Agora.html
  name: Agora.Core.Models.Requests
  nameWithType: Agora.Core.Models.Requests
  fullName: Agora.Core.Models.Requests
  spec.csharp:
  - uid: Agora
    name: Agora
    href: Agora.html
  - name: .
  - uid: Agora.Core
    name: Core
    href: Agora.Core.html
  - name: .
  - uid: Agora.Core.Models
    name: Models
    href: Agora.Core.Models.html
  - name: .
  - uid: Agora.Core.Models.Requests
    name: Requests
    href: Agora.Core.Models.Requests.html
  spec.vb:
  - uid: Agora
    name: Agora
    href: Agora.html
  - name: .
  - uid: Agora.Core
    name: Core
    href: Agora.Core.html
  - name: .
  - uid: Agora.Core.Models
    name: Models
    href: Agora.Core.Models.html
  - name: .
  - uid: Agora.Core.Models.Requests
    name: Requests
    href: Agora.Core.Models.Requests.html
- uid: Agora.Core.BusinessRules.Interfaces.IBusinessRulesValidator.ValidateTransactionStatusChange*
  commentId: Overload:Agora.Core.BusinessRules.Interfaces.IBusinessRulesValidator.ValidateTransactionStatusChange
  href: Agora.Core.BusinessRules.Interfaces.IBusinessRulesValidator.html#Agora_Core_BusinessRules_Interfaces_IBusinessRulesValidator_ValidateTransactionStatusChange_Agora_Core_Models_Transaction_Agora_Core_Enums_TransactionStatusEnum_Agora_Core_Enums_TransactionStatusEnum_Agora_Core_Common_UserContext_
  name: ValidateTransactionStatusChange
  nameWithType: IBusinessRulesValidator.ValidateTransactionStatusChange
  fullName: Agora.Core.BusinessRules.Interfaces.IBusinessRulesValidator.ValidateTransactionStatusChange
- uid: Agora.Core.Models.Transaction
  commentId: T:Agora.Core.Models.Transaction
  parent: Agora.Core.Models
  href: Agora.Core.Models.Transaction.html
  name: Transaction
  nameWithType: Transaction
  fullName: Agora.Core.Models.Transaction
- uid: Agora.Core.Enums.TransactionStatusEnum
  commentId: T:Agora.Core.Enums.TransactionStatusEnum
  parent: Agora.Core.Enums
  href: Agora.Core.Enums.TransactionStatusEnum.html
  name: TransactionStatusEnum
  nameWithType: TransactionStatusEnum
  fullName: Agora.Core.Enums.TransactionStatusEnum
- uid: Agora.Core.BusinessRules.Interfaces.IBusinessRulesValidator.ValidateTransaction*
  commentId: Overload:Agora.Core.BusinessRules.Interfaces.IBusinessRulesValidator.ValidateTransaction
  href: Agora.Core.BusinessRules.Interfaces.IBusinessRulesValidator.html#Agora_Core_BusinessRules_Interfaces_IBusinessRulesValidator_ValidateTransaction_Agora_Core_Models_Transaction_
  name: ValidateTransaction
  nameWithType: IBusinessRulesValidator.ValidateTransaction
  fullName: Agora.Core.BusinessRules.Interfaces.IBusinessRulesValidator.ValidateTransaction
