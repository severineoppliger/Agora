### YamlMime:ManagedReference
items:
- uid: Agora.Core.Interfaces.BusinessServices.IPostService
  commentId: T:Agora.Core.Interfaces.BusinessServices.IPostService
  id: IPostService
  parent: Agora.Core.Interfaces.BusinessServices
  children:
  - Agora.Core.Interfaces.BusinessServices.IPostService.ChangePostStatusAsync(System.Int64,Agora.Core.Common.UserContext,Agora.Core.Enums.PostStatus)
  - Agora.Core.Interfaces.BusinessServices.IPostService.CreatePostAsync(Agora.Core.Models.Post,Agora.Core.Common.UserContext)
  - Agora.Core.Interfaces.BusinessServices.IPostService.DeletePostAsync(System.Int64,Agora.Core.Common.UserContext)
  - Agora.Core.Interfaces.BusinessServices.IPostService.GetAllPostsAsync(Agora.Core.Enums.PostVisibilityMode,Agora.Core.Models.Filters.PostFilter,Agora.Core.Common.UserContext)
  - Agora.Core.Interfaces.BusinessServices.IPostService.GetPostByIdAsync(System.Int64,Agora.Core.Common.UserContext)
  - Agora.Core.Interfaces.BusinessServices.IPostService.UpdatePostDetailsAsync(System.Int64,Agora.Core.Models.Requests.PostDetailsUpdate,Agora.Core.Common.UserContext)
  langs:
  - csharp
  - vb
  name: IPostService
  nameWithType: IPostService
  fullName: Agora.Core.Interfaces.BusinessServices.IPostService
  type: Interface
  source:
    remote:
      path: Agora.Core/Interfaces/BusinessServices/IPostService.cs
      branch: 15-Transition-status-logic
      repo: https://severineoppliger@dev.azure.com/severineoppliger/Agora/_git/Agora
    id: IPostService
    path: Agora.Core/Interfaces/BusinessServices/IPostService.cs
    startLine: 12
  assemblies:
  - Agora.Core
  namespace: Agora.Core.Interfaces.BusinessServices
  summary: >-
    Defines business logic for managing user posts,

    including creation, updates, filtering, and status changes.
  example: []
  syntax:
    content: public interface IPostService
    content.vb: Public Interface IPostService
- uid: Agora.Core.Interfaces.BusinessServices.IPostService.GetAllPostsAsync(Agora.Core.Enums.PostVisibilityMode,Agora.Core.Models.Filters.PostFilter,Agora.Core.Common.UserContext)
  commentId: M:Agora.Core.Interfaces.BusinessServices.IPostService.GetAllPostsAsync(Agora.Core.Enums.PostVisibilityMode,Agora.Core.Models.Filters.PostFilter,Agora.Core.Common.UserContext)
  id: GetAllPostsAsync(Agora.Core.Enums.PostVisibilityMode,Agora.Core.Models.Filters.PostFilter,Agora.Core.Common.UserContext)
  parent: Agora.Core.Interfaces.BusinessServices.IPostService
  langs:
  - csharp
  - vb
  name: GetAllPostsAsync(PostVisibilityMode, PostFilter, UserContext?)
  nameWithType: IPostService.GetAllPostsAsync(PostVisibilityMode, PostFilter, UserContext?)
  fullName: Agora.Core.Interfaces.BusinessServices.IPostService.GetAllPostsAsync(Agora.Core.Enums.PostVisibilityMode, Agora.Core.Models.Filters.PostFilter, Agora.Core.Common.UserContext?)
  type: Method
  source:
    remote:
      path: Agora.Core/Interfaces/BusinessServices/IPostService.cs
      branch: 15-Transition-status-logic
      repo: https://severineoppliger@dev.azure.com/severineoppliger/Agora/_git/Agora
    id: GetAllPostsAsync
    path: Agora.Core/Interfaces/BusinessServices/IPostService.cs
    startLine: 21
  assemblies:
  - Agora.Core
  namespace: Agora.Core.Interfaces.BusinessServices
  summary: Retrieves all <code>Post</code> visible to the user according to authorization rules and visibility mode.
  example: []
  syntax:
    content: Task<Result<IReadOnlyList<Post>>> GetAllPostsAsync(PostVisibilityMode postVisibilityMode, PostFilter postFilter, UserContext? userContext)
    parameters:
    - id: postVisibilityMode
      type: Agora.Core.Enums.PostVisibilityMode
      description: Specifies the scope of posts to retrieve (e.g., catalog only, user-owned, admin view).
    - id: postFilter
      type: Agora.Core.Models.Filters.PostFilter
      description: Filter criteria to apply when querying posts.
    - id: userContext
      type: Agora.Core.Common.UserContext
      description: Context of the current user making the request.
    return:
      type: System.Threading.Tasks.Task{Agora.Core.Common.Result{System.Collections.Generic.IReadOnlyList{Agora.Core.Models.Post}}}
      description: A successful Result wrapping a list of posts visible to user, or failure if an error occurs.
    content.vb: Function GetAllPostsAsync(postVisibilityMode As PostVisibilityMode, postFilter As PostFilter, userContext As UserContext) As Task(Of Result(Of IReadOnlyList(Of Post)))
  overload: Agora.Core.Interfaces.BusinessServices.IPostService.GetAllPostsAsync*
  nameWithType.vb: IPostService.GetAllPostsAsync(PostVisibilityMode, PostFilter, UserContext)
  fullName.vb: Agora.Core.Interfaces.BusinessServices.IPostService.GetAllPostsAsync(Agora.Core.Enums.PostVisibilityMode, Agora.Core.Models.Filters.PostFilter, Agora.Core.Common.UserContext)
  name.vb: GetAllPostsAsync(PostVisibilityMode, PostFilter, UserContext)
- uid: Agora.Core.Interfaces.BusinessServices.IPostService.GetPostByIdAsync(System.Int64,Agora.Core.Common.UserContext)
  commentId: M:Agora.Core.Interfaces.BusinessServices.IPostService.GetPostByIdAsync(System.Int64,Agora.Core.Common.UserContext)
  id: GetPostByIdAsync(System.Int64,Agora.Core.Common.UserContext)
  parent: Agora.Core.Interfaces.BusinessServices.IPostService
  langs:
  - csharp
  - vb
  name: GetPostByIdAsync(long, UserContext?)
  nameWithType: IPostService.GetPostByIdAsync(long, UserContext?)
  fullName: Agora.Core.Interfaces.BusinessServices.IPostService.GetPostByIdAsync(long, Agora.Core.Common.UserContext?)
  type: Method
  source:
    remote:
      path: Agora.Core/Interfaces/BusinessServices/IPostService.cs
      branch: 15-Transition-status-logic
      repo: https://severineoppliger@dev.azure.com/severineoppliger/Agora/_git/Agora
    id: GetPostByIdAsync
    path: Agora.Core/Interfaces/BusinessServices/IPostService.cs
    startLine: 37
  assemblies:
  - Agora.Core
  namespace: Agora.Core.Interfaces.BusinessServices
  summary: Retrieves a single <code>Post</code> by its ID if visible to the user.
  example: []
  syntax:
    content: Task<Result<Post>> GetPostByIdAsync(long postId, UserContext? userContext)
    parameters:
    - id: postId
      type: System.Int64
      description: The ID of the post to retrieve.
    - id: userContext
      type: Agora.Core.Common.UserContext
      description: Context of the current user requesting the post.
    return:
      type: System.Threading.Tasks.Task{Agora.Core.Common.Result{Agora.Core.Models.Post}}
      description: >-
        Success wrapping the <code>Post</code> if found and authorized,

        failure with NotFound if missing,

        or failure with Unauthorized if the user cannot view it.
    content.vb: Function GetPostByIdAsync(postId As Long, userContext As UserContext) As Task(Of Result(Of Post))
  overload: Agora.Core.Interfaces.BusinessServices.IPostService.GetPostByIdAsync*
  nameWithType.vb: IPostService.GetPostByIdAsync(Long, UserContext)
  fullName.vb: Agora.Core.Interfaces.BusinessServices.IPostService.GetPostByIdAsync(Long, Agora.Core.Common.UserContext)
  name.vb: GetPostByIdAsync(Long, UserContext)
- uid: Agora.Core.Interfaces.BusinessServices.IPostService.CreatePostAsync(Agora.Core.Models.Post,Agora.Core.Common.UserContext)
  commentId: M:Agora.Core.Interfaces.BusinessServices.IPostService.CreatePostAsync(Agora.Core.Models.Post,Agora.Core.Common.UserContext)
  id: CreatePostAsync(Agora.Core.Models.Post,Agora.Core.Common.UserContext)
  parent: Agora.Core.Interfaces.BusinessServices.IPostService
  langs:
  - csharp
  - vb
  name: CreatePostAsync(Post, UserContext)
  nameWithType: IPostService.CreatePostAsync(Post, UserContext)
  fullName: Agora.Core.Interfaces.BusinessServices.IPostService.CreatePostAsync(Agora.Core.Models.Post, Agora.Core.Common.UserContext)
  type: Method
  source:
    remote:
      path: Agora.Core/Interfaces/BusinessServices/IPostService.cs
      branch: 15-Transition-status-logic
      repo: https://severineoppliger@dev.azure.com/severineoppliger/Agora/_git/Agora
    id: CreatePostAsync
    path: Agora.Core/Interfaces/BusinessServices/IPostService.cs
    startLine: 49
  assemblies:
  - Agora.Core
  namespace: Agora.Core.Interfaces.BusinessServices
  summary: Creates a new <code>Post</code> after validating authorization and business rules.
  example: []
  syntax:
    content: Task<Result<Post>> CreatePostAsync(Post post, UserContext userContext)
    parameters:
    - id: post
      type: Agora.Core.Models.Post
      description: The <code>Post</code> entity to create.
    - id: userContext
      type: Agora.Core.Common.UserContext
      description: Context of the user creating the post.
    return:
      type: System.Threading.Tasks.Task{Agora.Core.Common.Result{Agora.Core.Models.Post}}
      description: Success wrapping the created <code>Post</code> if successful, or failure with relevant error details.
    content.vb: Function CreatePostAsync(post As Post, userContext As UserContext) As Task(Of Result(Of Post))
  overload: Agora.Core.Interfaces.BusinessServices.IPostService.CreatePostAsync*
- uid: Agora.Core.Interfaces.BusinessServices.IPostService.UpdatePostDetailsAsync(System.Int64,Agora.Core.Models.Requests.PostDetailsUpdate,Agora.Core.Common.UserContext)
  commentId: M:Agora.Core.Interfaces.BusinessServices.IPostService.UpdatePostDetailsAsync(System.Int64,Agora.Core.Models.Requests.PostDetailsUpdate,Agora.Core.Common.UserContext)
  id: UpdatePostDetailsAsync(System.Int64,Agora.Core.Models.Requests.PostDetailsUpdate,Agora.Core.Common.UserContext)
  parent: Agora.Core.Interfaces.BusinessServices.IPostService
  langs:
  - csharp
  - vb
  name: UpdatePostDetailsAsync(long, PostDetailsUpdate, UserContext)
  nameWithType: IPostService.UpdatePostDetailsAsync(long, PostDetailsUpdate, UserContext)
  fullName: Agora.Core.Interfaces.BusinessServices.IPostService.UpdatePostDetailsAsync(long, Agora.Core.Models.Requests.PostDetailsUpdate, Agora.Core.Common.UserContext)
  type: Method
  source:
    remote:
      path: Agora.Core/Interfaces/BusinessServices/IPostService.cs
      branch: 15-Transition-status-logic
      repo: https://severineoppliger@dev.azure.com/severineoppliger/Agora/_git/Agora
    id: UpdatePostDetailsAsync
    path: Agora.Core/Interfaces/BusinessServices/IPostService.cs
    startLine: 64
  assemblies:
  - Agora.Core
  namespace: Agora.Core.Interfaces.BusinessServices
  summary: >-
    Updates specified details of an existing <code>Post</code> after validating authorization and business rules.

    Only non-null values in <code class="paramref">newDetails</code> are applied.
  example: []
  syntax:
    content: Task<Result> UpdatePostDetailsAsync(long postId, PostDetailsUpdate newDetails, UserContext userContext)
    parameters:
    - id: postId
      type: System.Int64
      description: ID of the <code>Post</code> to update.
    - id: newDetails
      type: Agora.Core.Models.Requests.PostDetailsUpdate
      description: The details to update.
    - id: userContext
      type: Agora.Core.Common.UserContext
      description: Context of the user performing the update.
    return:
      type: System.Threading.Tasks.Task{Agora.Core.Common.Result}
      description: >-
        Success if update and save are successful,

        or failure with appropriate error messages.
    content.vb: Function UpdatePostDetailsAsync(postId As Long, newDetails As PostDetailsUpdate, userContext As UserContext) As Task(Of Result)
  overload: Agora.Core.Interfaces.BusinessServices.IPostService.UpdatePostDetailsAsync*
  nameWithType.vb: IPostService.UpdatePostDetailsAsync(Long, PostDetailsUpdate, UserContext)
  fullName.vb: Agora.Core.Interfaces.BusinessServices.IPostService.UpdatePostDetailsAsync(Long, Agora.Core.Models.Requests.PostDetailsUpdate, Agora.Core.Common.UserContext)
  name.vb: UpdatePostDetailsAsync(Long, PostDetailsUpdate, UserContext)
- uid: Agora.Core.Interfaces.BusinessServices.IPostService.ChangePostStatusAsync(System.Int64,Agora.Core.Common.UserContext,Agora.Core.Enums.PostStatus)
  commentId: M:Agora.Core.Interfaces.BusinessServices.IPostService.ChangePostStatusAsync(System.Int64,Agora.Core.Common.UserContext,Agora.Core.Enums.PostStatus)
  id: ChangePostStatusAsync(System.Int64,Agora.Core.Common.UserContext,Agora.Core.Enums.PostStatus)
  parent: Agora.Core.Interfaces.BusinessServices.IPostService
  langs:
  - csharp
  - vb
  name: ChangePostStatusAsync(long, UserContext, PostStatus)
  nameWithType: IPostService.ChangePostStatusAsync(long, UserContext, PostStatus)
  fullName: Agora.Core.Interfaces.BusinessServices.IPostService.ChangePostStatusAsync(long, Agora.Core.Common.UserContext, Agora.Core.Enums.PostStatus)
  type: Method
  source:
    remote:
      path: Agora.Core/Interfaces/BusinessServices/IPostService.cs
      branch: 15-Transition-status-logic
      repo: https://severineoppliger@dev.azure.com/severineoppliger/Agora/_git/Agora
    id: ChangePostStatusAsync
    path: Agora.Core/Interfaces/BusinessServices/IPostService.cs
    startLine: 79
  assemblies:
  - Agora.Core
  namespace: Agora.Core.Interfaces.BusinessServices
  summary: Changes the status of an existing <code>Post</code> after authorization and validation of state transitions.
  example: []
  syntax:
    content: Task<Result> ChangePostStatusAsync(long postId, UserContext userContext, PostStatus targetStatus)
    parameters:
    - id: postId
      type: System.Int64
      description: ID of the <code>Post</code> to update status for.
    - id: userContext
      type: Agora.Core.Common.UserContext
      description: Context of the user performing the status change.
    - id: targetStatus
      type: Agora.Core.Enums.PostStatus
      description: The new post status to apply.
    return:
      type: System.Threading.Tasks.Task{Agora.Core.Common.Result}
      description: >-
        Success if the status was changed and saved successfully,

        or failure with relevant error details if invalid or unauthorized.
    content.vb: Function ChangePostStatusAsync(postId As Long, userContext As UserContext, targetStatus As PostStatus) As Task(Of Result)
  overload: Agora.Core.Interfaces.BusinessServices.IPostService.ChangePostStatusAsync*
  nameWithType.vb: IPostService.ChangePostStatusAsync(Long, UserContext, PostStatus)
  fullName.vb: Agora.Core.Interfaces.BusinessServices.IPostService.ChangePostStatusAsync(Long, Agora.Core.Common.UserContext, Agora.Core.Enums.PostStatus)
  name.vb: ChangePostStatusAsync(Long, UserContext, PostStatus)
- uid: Agora.Core.Interfaces.BusinessServices.IPostService.DeletePostAsync(System.Int64,Agora.Core.Common.UserContext)
  commentId: M:Agora.Core.Interfaces.BusinessServices.IPostService.DeletePostAsync(System.Int64,Agora.Core.Common.UserContext)
  id: DeletePostAsync(System.Int64,Agora.Core.Common.UserContext)
  parent: Agora.Core.Interfaces.BusinessServices.IPostService
  langs:
  - csharp
  - vb
  name: DeletePostAsync(long, UserContext)
  nameWithType: IPostService.DeletePostAsync(long, UserContext)
  fullName: Agora.Core.Interfaces.BusinessServices.IPostService.DeletePostAsync(long, Agora.Core.Common.UserContext)
  type: Method
  source:
    remote:
      path: Agora.Core/Interfaces/BusinessServices/IPostService.cs
      branch: 15-Transition-status-logic
      repo: https://severineoppliger@dev.azure.com/severineoppliger/Agora/_git/Agora
    id: DeletePostAsync
    path: Agora.Core/Interfaces/BusinessServices/IPostService.cs
    startLine: 90
  assemblies:
  - Agora.Core
  namespace: Agora.Core.Interfaces.BusinessServices
  summary: Delete a <code>Post</code> after validating authorization and business rules.
  example: []
  syntax:
    content: Task<Result> DeletePostAsync(long postId, UserContext userContext)
    parameters:
    - id: postId
      type: System.Int64
      description: ID of the <code>Post</code> to delete.
    - id: userContext
      type: Agora.Core.Common.UserContext
      description: Context of the user requesting the deletion.
    return:
      type: System.Threading.Tasks.Task{Agora.Core.Common.Result}
      description: >-
        Success if the <code>Post</code> was successfully deleted,

        or failure with relevant error details if invalid or unauthorized.
    content.vb: Function DeletePostAsync(postId As Long, userContext As UserContext) As Task(Of Result)
  overload: Agora.Core.Interfaces.BusinessServices.IPostService.DeletePostAsync*
  nameWithType.vb: IPostService.DeletePostAsync(Long, UserContext)
  fullName.vb: Agora.Core.Interfaces.BusinessServices.IPostService.DeletePostAsync(Long, Agora.Core.Common.UserContext)
  name.vb: DeletePostAsync(Long, UserContext)
references:
- uid: Agora.Core.Interfaces.BusinessServices
  commentId: N:Agora.Core.Interfaces.BusinessServices
  href: Agora.html
  name: Agora.Core.Interfaces.BusinessServices
  nameWithType: Agora.Core.Interfaces.BusinessServices
  fullName: Agora.Core.Interfaces.BusinessServices
  spec.csharp:
  - uid: Agora
    name: Agora
    href: Agora.html
  - name: .
  - uid: Agora.Core
    name: Core
    href: Agora.Core.html
  - name: .
  - uid: Agora.Core.Interfaces
    name: Interfaces
    href: Agora.Core.Interfaces.html
  - name: .
  - uid: Agora.Core.Interfaces.BusinessServices
    name: BusinessServices
    href: Agora.Core.Interfaces.BusinessServices.html
  spec.vb:
  - uid: Agora
    name: Agora
    href: Agora.html
  - name: .
  - uid: Agora.Core
    name: Core
    href: Agora.Core.html
  - name: .
  - uid: Agora.Core.Interfaces
    name: Interfaces
    href: Agora.Core.Interfaces.html
  - name: .
  - uid: Agora.Core.Interfaces.BusinessServices
    name: BusinessServices
    href: Agora.Core.Interfaces.BusinessServices.html
- uid: Agora.Core.Interfaces.BusinessServices.IPostService.GetAllPostsAsync*
  commentId: Overload:Agora.Core.Interfaces.BusinessServices.IPostService.GetAllPostsAsync
  href: Agora.Core.Interfaces.BusinessServices.IPostService.html#Agora_Core_Interfaces_BusinessServices_IPostService_GetAllPostsAsync_Agora_Core_Enums_PostVisibilityMode_Agora_Core_Models_Filters_PostFilter_Agora_Core_Common_UserContext_
  name: GetAllPostsAsync
  nameWithType: IPostService.GetAllPostsAsync
  fullName: Agora.Core.Interfaces.BusinessServices.IPostService.GetAllPostsAsync
- uid: Agora.Core.Enums.PostVisibilityMode
  commentId: T:Agora.Core.Enums.PostVisibilityMode
  parent: Agora.Core.Enums
  href: Agora.Core.Enums.PostVisibilityMode.html
  name: PostVisibilityMode
  nameWithType: PostVisibilityMode
  fullName: Agora.Core.Enums.PostVisibilityMode
- uid: Agora.Core.Models.Filters.PostFilter
  commentId: T:Agora.Core.Models.Filters.PostFilter
  parent: Agora.Core.Models.Filters
  href: Agora.Core.Models.Filters.PostFilter.html
  name: PostFilter
  nameWithType: PostFilter
  fullName: Agora.Core.Models.Filters.PostFilter
- uid: Agora.Core.Common.UserContext
  commentId: T:Agora.Core.Common.UserContext
  parent: Agora.Core.Common
  href: Agora.Core.Common.UserContext.html
  name: UserContext
  nameWithType: UserContext
  fullName: Agora.Core.Common.UserContext
- uid: System.Threading.Tasks.Task{Agora.Core.Common.Result{System.Collections.Generic.IReadOnlyList{Agora.Core.Models.Post}}}
  commentId: T:System.Threading.Tasks.Task{Agora.Core.Common.Result{System.Collections.Generic.IReadOnlyList{Agora.Core.Models.Post}}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<Result<IReadOnlyList<Post>>>
  nameWithType: Task<Result<IReadOnlyList<Post>>>
  fullName: System.Threading.Tasks.Task<Agora.Core.Common.Result<System.Collections.Generic.IReadOnlyList<Agora.Core.Models.Post>>>
  nameWithType.vb: Task(Of Result(Of IReadOnlyList(Of Post)))
  fullName.vb: System.Threading.Tasks.Task(Of Agora.Core.Common.Result(Of System.Collections.Generic.IReadOnlyList(Of Agora.Core.Models.Post)))
  name.vb: Task(Of Result(Of IReadOnlyList(Of Post)))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: Agora.Core.Common.Result`1
    name: Result
    href: Agora.Core.Common.Result-1.html
  - name: <
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1
  - name: <
  - uid: Agora.Core.Models.Post
    name: Post
    href: Agora.Core.Models.Post.html
  - name: '>'
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: Agora.Core.Common.Result`1
    name: Result
    href: Agora.Core.Common.Result-1.html
  - name: (
  - name: Of
  - name: " "
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1
  - name: (
  - name: Of
  - name: " "
  - uid: Agora.Core.Models.Post
    name: Post
    href: Agora.Core.Models.Post.html
  - name: )
  - name: )
  - name: )
- uid: Agora.Core.Enums
  commentId: N:Agora.Core.Enums
  href: Agora.html
  name: Agora.Core.Enums
  nameWithType: Agora.Core.Enums
  fullName: Agora.Core.Enums
  spec.csharp:
  - uid: Agora
    name: Agora
    href: Agora.html
  - name: .
  - uid: Agora.Core
    name: Core
    href: Agora.Core.html
  - name: .
  - uid: Agora.Core.Enums
    name: Enums
    href: Agora.Core.Enums.html
  spec.vb:
  - uid: Agora
    name: Agora
    href: Agora.html
  - name: .
  - uid: Agora.Core
    name: Core
    href: Agora.Core.html
  - name: .
  - uid: Agora.Core.Enums
    name: Enums
    href: Agora.Core.Enums.html
- uid: Agora.Core.Models.Filters
  commentId: N:Agora.Core.Models.Filters
  href: Agora.html
  name: Agora.Core.Models.Filters
  nameWithType: Agora.Core.Models.Filters
  fullName: Agora.Core.Models.Filters
  spec.csharp:
  - uid: Agora
    name: Agora
    href: Agora.html
  - name: .
  - uid: Agora.Core
    name: Core
    href: Agora.Core.html
  - name: .
  - uid: Agora.Core.Models
    name: Models
    href: Agora.Core.Models.html
  - name: .
  - uid: Agora.Core.Models.Filters
    name: Filters
    href: Agora.Core.Models.Filters.html
  spec.vb:
  - uid: Agora
    name: Agora
    href: Agora.html
  - name: .
  - uid: Agora.Core
    name: Core
    href: Agora.Core.html
  - name: .
  - uid: Agora.Core.Models
    name: Models
    href: Agora.Core.Models.html
  - name: .
  - uid: Agora.Core.Models.Filters
    name: Filters
    href: Agora.Core.Models.Filters.html
- uid: Agora.Core.Common
  commentId: N:Agora.Core.Common
  href: Agora.html
  name: Agora.Core.Common
  nameWithType: Agora.Core.Common
  fullName: Agora.Core.Common
  spec.csharp:
  - uid: Agora
    name: Agora
    href: Agora.html
  - name: .
  - uid: Agora.Core
    name: Core
    href: Agora.Core.html
  - name: .
  - uid: Agora.Core.Common
    name: Common
    href: Agora.Core.Common.html
  spec.vb:
  - uid: Agora
    name: Agora
    href: Agora.html
  - name: .
  - uid: Agora.Core
    name: Core
    href: Agora.Core.html
  - name: .
  - uid: Agora.Core.Common
    name: Common
    href: Agora.Core.Common.html
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
- uid: Agora.Core.Interfaces.BusinessServices.IPostService.GetPostByIdAsync*
  commentId: Overload:Agora.Core.Interfaces.BusinessServices.IPostService.GetPostByIdAsync
  href: Agora.Core.Interfaces.BusinessServices.IPostService.html#Agora_Core_Interfaces_BusinessServices_IPostService_GetPostByIdAsync_System_Int64_Agora_Core_Common_UserContext_
  name: GetPostByIdAsync
  nameWithType: IPostService.GetPostByIdAsync
  fullName: Agora.Core.Interfaces.BusinessServices.IPostService.GetPostByIdAsync
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int64
  name: long
  nameWithType: long
  fullName: long
  nameWithType.vb: Long
  fullName.vb: Long
  name.vb: Long
- uid: System.Threading.Tasks.Task{Agora.Core.Common.Result{Agora.Core.Models.Post}}
  commentId: T:System.Threading.Tasks.Task{Agora.Core.Common.Result{Agora.Core.Models.Post}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<Result<Post>>
  nameWithType: Task<Result<Post>>
  fullName: System.Threading.Tasks.Task<Agora.Core.Common.Result<Agora.Core.Models.Post>>
  nameWithType.vb: Task(Of Result(Of Post))
  fullName.vb: System.Threading.Tasks.Task(Of Agora.Core.Common.Result(Of Agora.Core.Models.Post))
  name.vb: Task(Of Result(Of Post))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: Agora.Core.Common.Result`1
    name: Result
    href: Agora.Core.Common.Result-1.html
  - name: <
  - uid: Agora.Core.Models.Post
    name: Post
    href: Agora.Core.Models.Post.html
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: Agora.Core.Common.Result`1
    name: Result
    href: Agora.Core.Common.Result-1.html
  - name: (
  - name: Of
  - name: " "
  - uid: Agora.Core.Models.Post
    name: Post
    href: Agora.Core.Models.Post.html
  - name: )
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: Agora.Core.Interfaces.BusinessServices.IPostService.CreatePostAsync*
  commentId: Overload:Agora.Core.Interfaces.BusinessServices.IPostService.CreatePostAsync
  href: Agora.Core.Interfaces.BusinessServices.IPostService.html#Agora_Core_Interfaces_BusinessServices_IPostService_CreatePostAsync_Agora_Core_Models_Post_Agora_Core_Common_UserContext_
  name: CreatePostAsync
  nameWithType: IPostService.CreatePostAsync
  fullName: Agora.Core.Interfaces.BusinessServices.IPostService.CreatePostAsync
- uid: Agora.Core.Models.Post
  commentId: T:Agora.Core.Models.Post
  parent: Agora.Core.Models
  href: Agora.Core.Models.Post.html
  name: Post
  nameWithType: Post
  fullName: Agora.Core.Models.Post
- uid: Agora.Core.Models
  commentId: N:Agora.Core.Models
  href: Agora.html
  name: Agora.Core.Models
  nameWithType: Agora.Core.Models
  fullName: Agora.Core.Models
  spec.csharp:
  - uid: Agora
    name: Agora
    href: Agora.html
  - name: .
  - uid: Agora.Core
    name: Core
    href: Agora.Core.html
  - name: .
  - uid: Agora.Core.Models
    name: Models
    href: Agora.Core.Models.html
  spec.vb:
  - uid: Agora
    name: Agora
    href: Agora.html
  - name: .
  - uid: Agora.Core
    name: Core
    href: Agora.Core.html
  - name: .
  - uid: Agora.Core.Models
    name: Models
    href: Agora.Core.Models.html
- uid: Agora.Core.Interfaces.BusinessServices.IPostService.UpdatePostDetailsAsync*
  commentId: Overload:Agora.Core.Interfaces.BusinessServices.IPostService.UpdatePostDetailsAsync
  href: Agora.Core.Interfaces.BusinessServices.IPostService.html#Agora_Core_Interfaces_BusinessServices_IPostService_UpdatePostDetailsAsync_System_Int64_Agora_Core_Models_Requests_PostDetailsUpdate_Agora_Core_Common_UserContext_
  name: UpdatePostDetailsAsync
  nameWithType: IPostService.UpdatePostDetailsAsync
  fullName: Agora.Core.Interfaces.BusinessServices.IPostService.UpdatePostDetailsAsync
- uid: Agora.Core.Models.Requests.PostDetailsUpdate
  commentId: T:Agora.Core.Models.Requests.PostDetailsUpdate
  parent: Agora.Core.Models.Requests
  href: Agora.Core.Models.Requests.PostDetailsUpdate.html
  name: PostDetailsUpdate
  nameWithType: PostDetailsUpdate
  fullName: Agora.Core.Models.Requests.PostDetailsUpdate
- uid: System.Threading.Tasks.Task{Agora.Core.Common.Result}
  commentId: T:System.Threading.Tasks.Task{Agora.Core.Common.Result}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<Result>
  nameWithType: Task<Result>
  fullName: System.Threading.Tasks.Task<Agora.Core.Common.Result>
  nameWithType.vb: Task(Of Result)
  fullName.vb: System.Threading.Tasks.Task(Of Agora.Core.Common.Result)
  name.vb: Task(Of Result)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: Agora.Core.Common.Result
    name: Result
    href: Agora.Core.Common.Result.html
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: Agora.Core.Common.Result
    name: Result
    href: Agora.Core.Common.Result.html
  - name: )
- uid: Agora.Core.Models.Requests
  commentId: N:Agora.Core.Models.Requests
  href: Agora.html
  name: Agora.Core.Models.Requests
  nameWithType: Agora.Core.Models.Requests
  fullName: Agora.Core.Models.Requests
  spec.csharp:
  - uid: Agora
    name: Agora
    href: Agora.html
  - name: .
  - uid: Agora.Core
    name: Core
    href: Agora.Core.html
  - name: .
  - uid: Agora.Core.Models
    name: Models
    href: Agora.Core.Models.html
  - name: .
  - uid: Agora.Core.Models.Requests
    name: Requests
    href: Agora.Core.Models.Requests.html
  spec.vb:
  - uid: Agora
    name: Agora
    href: Agora.html
  - name: .
  - uid: Agora.Core
    name: Core
    href: Agora.Core.html
  - name: .
  - uid: Agora.Core.Models
    name: Models
    href: Agora.Core.Models.html
  - name: .
  - uid: Agora.Core.Models.Requests
    name: Requests
    href: Agora.Core.Models.Requests.html
- uid: Agora.Core.Interfaces.BusinessServices.IPostService.ChangePostStatusAsync*
  commentId: Overload:Agora.Core.Interfaces.BusinessServices.IPostService.ChangePostStatusAsync
  href: Agora.Core.Interfaces.BusinessServices.IPostService.html#Agora_Core_Interfaces_BusinessServices_IPostService_ChangePostStatusAsync_System_Int64_Agora_Core_Common_UserContext_Agora_Core_Enums_PostStatus_
  name: ChangePostStatusAsync
  nameWithType: IPostService.ChangePostStatusAsync
  fullName: Agora.Core.Interfaces.BusinessServices.IPostService.ChangePostStatusAsync
- uid: Agora.Core.Enums.PostStatus
  commentId: T:Agora.Core.Enums.PostStatus
  parent: Agora.Core.Enums
  href: Agora.Core.Enums.PostStatus.html
  name: PostStatus
  nameWithType: PostStatus
  fullName: Agora.Core.Enums.PostStatus
- uid: Agora.Core.Interfaces.BusinessServices.IPostService.DeletePostAsync*
  commentId: Overload:Agora.Core.Interfaces.BusinessServices.IPostService.DeletePostAsync
  href: Agora.Core.Interfaces.BusinessServices.IPostService.html#Agora_Core_Interfaces_BusinessServices_IPostService_DeletePostAsync_System_Int64_Agora_Core_Common_UserContext_
  name: DeletePostAsync
  nameWithType: IPostService.DeletePostAsync
  fullName: Agora.Core.Interfaces.BusinessServices.IPostService.DeletePostAsync
