// <auto-generated />
using System;
using Agora.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Agora.Infrastructure.Migrations
{
    [DbContext(typeof(AgoraDbContext))]
    [Migration("20250501140917_AddSeedingDataAndAddIsSuccessAndDescriptionToTransactionStatus")]
    partial class AddSeedingDataAndAddIsSuccessAndDescriptionToTransactionStatus
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Agora.Core.Models.Post", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)");

                    b.Property<long>("PostCategoryId")
                        .HasColumnType("bigint");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PostCategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Posts", (string)null);
                });

            modelBuilder.Entity("Agora.Core.Models.PostCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("PostCategories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "Cours d'appui"
                        },
                        new
                        {
                            Id = 2L,
                            Name = "Covoiturage"
                        },
                        new
                        {
                            Id = 3L,
                            Name = "Informatique"
                        },
                        new
                        {
                            Id = 4L,
                            Name = "Arts et culture"
                        },
                        new
                        {
                            Id = 5L,
                            Name = "Démarches administratives"
                        },
                        new
                        {
                            Id = 6L,
                            Name = "Déménagement"
                        },
                        new
                        {
                            Id = 7L,
                            Name = "Services du quotidien"
                        },
                        new
                        {
                            Id = 8L,
                            Name = "Autres"
                        });
                });

            modelBuilder.Entity("Agora.Core.Models.Transaction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("BuyerId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<long?>("PostId")
                        .HasColumnType("bigint");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<long>("SellerId")
                        .HasColumnType("bigint");

                    b.Property<long>("TransactionStatusId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("BuyerId");

                    b.HasIndex("PostId");

                    b.HasIndex("SellerId");

                    b.HasIndex("TransactionStatusId");

                    b.ToTable("Transactions", (string)null);
                });

            modelBuilder.Entity("Agora.Core.Models.TransactionStatus", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<bool>("IsFinal")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsSuccess")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("TransactionsStatus", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Description = "La demande d'échange a été initiée par un des deux utilisateurs mais pas encore acceptée par l'autre utilisateur.",
                            IsFinal = false,
                            IsSuccess = false,
                            Name = "En attente"
                        },
                        new
                        {
                            Id = 2L,
                            Description = "La demande d'échange a été acceptée par l'autre utilisateur. La transaction peut avoir lieu.",
                            IsFinal = false,
                            IsSuccess = false,
                            Name = "Acceptée"
                        },
                        new
                        {
                            Id = 3L,
                            Description = "La demande d'échange a été refusée par l'autre utilisateur. La transaction n'aura donc pas lieu.",
                            IsFinal = true,
                            IsSuccess = false,
                            Name = "Refusée"
                        },
                        new
                        {
                            Id = 4L,
                            Description = "La demande d'échange a été annulée par l’un des deux utilisateurs.",
                            IsFinal = false,
                            IsSuccess = false,
                            Name = "Annulée"
                        },
                        new
                        {
                            Id = 5L,
                            Description = "Le service n'a pas pu être réalisé, malgré la confirmation de la demande d'échange.",
                            IsFinal = true,
                            IsSuccess = false,
                            Name = "Échouée"
                        },
                        new
                        {
                            Id = 6L,
                            Description = "Le service est en train d’être réalisé.",
                            IsFinal = false,
                            IsSuccess = false,
                            Name = "En cours"
                        },
                        new
                        {
                            Id = 7L,
                            Description = "Le service a été réalisé et validé par un seul utilisateur, en attente de confirmation de l'autre.",
                            IsFinal = false,
                            IsSuccess = false,
                            Name = "Partiellement validée"
                        },
                        new
                        {
                            Id = 8L,
                            Description = "Le service a été effectué et validé par les deux parties. Les points sont transférés de l'acheteur au vendeur.",
                            IsFinal = true,
                            IsSuccess = true,
                            Name = "Terminée"
                        },
                        new
                        {
                            Id = 9L,
                            Description = "Le service a été effectué mais un désaccord a été signalé sur la transaction.",
                            IsFinal = false,
                            IsSuccess = false,
                            Name = "En litige"
                        },
                        new
                        {
                            Id = 10L,
                            Description = "Le litige a été résolu et les valeurs actuelles de la transaction ont été acceptées par les deux partis.",
                            IsFinal = true,
                            IsSuccess = true,
                            Name = "Résolue et acceptée"
                        },
                        new
                        {
                            Id = 11L,
                            Description = "La résolution du litige s'est soldé par l'annulation de la transaction.",
                            IsFinal = true,
                            IsSuccess = false,
                            Name = "Résolue et annulée"
                        });
                });

            modelBuilder.Entity("Agora.Core.Models.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("Credit")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("LastLoginAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("Agora.Core.Models.Post", b =>
                {
                    b.HasOne("Agora.Core.Models.PostCategory", "PostCategory")
                        .WithMany("Posts")
                        .HasForeignKey("PostCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Agora.Core.Models.User", "User")
                        .WithMany("Posts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PostCategory");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Agora.Core.Models.Transaction", b =>
                {
                    b.HasOne("Agora.Core.Models.User", "Buyer")
                        .WithMany("TransactionsAsBuyer")
                        .HasForeignKey("BuyerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Agora.Core.Models.Post", "Post")
                        .WithMany("Transactions")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Agora.Core.Models.User", "Seller")
                        .WithMany("TransactionsAsSeller")
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Agora.Core.Models.TransactionStatus", "TransactionStatus")
                        .WithMany("Transactions")
                        .HasForeignKey("TransactionStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Buyer");

                    b.Navigation("Post");

                    b.Navigation("Seller");

                    b.Navigation("TransactionStatus");
                });

            modelBuilder.Entity("Agora.Core.Models.Post", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("Agora.Core.Models.PostCategory", b =>
                {
                    b.Navigation("Posts");
                });

            modelBuilder.Entity("Agora.Core.Models.TransactionStatus", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("Agora.Core.Models.User", b =>
                {
                    b.Navigation("Posts");

                    b.Navigation("TransactionsAsBuyer");

                    b.Navigation("TransactionsAsSeller");
                });
#pragma warning restore 612, 618
        }
    }
}
